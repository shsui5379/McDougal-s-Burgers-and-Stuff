Global variables:
array to track remaining coins/bills (registerBalance) [done]
time left (time) [done]
constants for the cost of different items [done]
variables to track number of different type of sales (cashPay, electronicPay) [done]
array for arrays that contain receipts (receipts) [done]
array to track item sales (itemSales) [done]
array to store history arrays (historyData) [done]

Functions:
random number generator (randomNum();)
display updater (dislay();)
total cost calculator (totalCalc();)
tax calculator
meal picker (mealPicker();)
subtotal calculator (subtotalCalc();)
payment method determiner (paymentMethodChooser();)
customer wallet generator (walletGenerator();)
time updater (timeUpdater();)
initialize (initialize();)
history data packaging
history data processing (historyDataProcessor();)
mean calculator (mean();)
coin/bill dropper (billDropper();)
history reset (reset();)
transaction simulator (transaction();)

Interface:
A column on the left for receipts
A hr separating receipts
A column on the right for stats (sales, payment method, register balance, total sales)
A row on bottom for history
Paper like background for receipts
Receipts contain items ordered, prices, subtotal, tax, total, payment method, payment and change
Button to start simulation and reset data

Flow:
User click the start buton to begin
Reset time, receipts and cashier inventory (initialize();)
Random number generator picks a number between 0 and 2 to determine when a customer arrives. (randomNum();) Subtract number from time tracker (time)
Random number generator picks a number between 1 and 5 to determine how long it took to serve a customer. (randomNum();)  Stubtract number from time tracker (time, timeUpdater();)
Verify that time is still >0
Random number generator picks a integer 0 or 1 to pick number of entrees, integer 0, 1 or 2 to pick number of side dishes, integer 0 or 1 to pick number of dessert (randomNum();)
    +1 drink
For the number selected above, for entrees, random number generator picks an integer between 1-3 to pick entrees, an integer between 1-4 to pick sides, an integer between 1-3 to pick dessert and an integer between 1-3 to pick drinks (randomNum();, mealPicker();)
Store that generated data into an array as the receipt for that order
Sum the prices of the food orderd to get subtotal by iterating through the receipt (subtotalCalc();)
Multiply subtotal by 1.08875 (tax) to find grand total (totalCalc();)
Random number generator picks a number between 0 and 10, for the probability of paying by cash (40%) or credit (60%) (randomNum();, paymentMethodChooser();)
If the person pays by credit, add to the electronic payments variables (electronicPay)
If the person pays by cash, random number generator picks a number between 0 and 10 for the probability of paying exact change (10%) (randomNum();)
If change allowed, random number generator picks an integer between 0 and 5 for number of dollar bills, integer between 0 and 3 for number of $5 bills, and an integer between 0 and 2 for number of $10 bills for the customer's wallet, to be stored in an array (walletGenerator();)
To pay cash with change allowed, customer will start by paying with the lowest denomination it has, and move up from there.  Update variables tracking cashier cash inventory
Cashier gives change by starting with the lowest denomination and moving up.  
If the cashier is unable to give change, round up if difference is <0.05.  Else, drop.  Update cashier inventory (transactionSimulator();)
Update cash payment tracker (cashPay)
Check if the cashier has less than 10 of a coin, exchange 0.5 worth of other coins for 50 pennies, $2 for 40 nickels, $5 for 50 dimes or $10 for 40 quarters (billDropper();)
Store subtotal, tax, total, payment method, payment and change into the current receipt array
Push current receipt to receipt holder (receipts)
Repeat process until time tracker runs out of time
Once time runs out, calculate total sales (length of receipts holder), total cash sales, total electronic sales, register balance, sales for each item by going through receipts (currentDataProcessor();)
    balance is even if amount of money = total cash sales + 100
Push that info into an array that gets pushed to a history storage array
Update history info by taking average of the corresponding indices (historyDataProcessor();)
Display receipts by iterating the receipt holder then iterating through the data at respecive indicies (display();)